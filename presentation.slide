# Ending The Data Format Wars
Truce time

Carson Anderson
DevX-O, Weave
@carson_ops

https://github.com/carsonoid/talk-ending-the-data-format-wars

## Summary

Having data in memory is great! But we often need to serialize that data out into a format that can be stored or shared between systems. When that time comes we need to turn to a format like YAML, JSON, TOML, HCL, or any of the other common formats for sharing data.

But how well do you really know these formats? We all tend to have preferences but is there a clear winner? What do each of these formats look like? What can they describe? What canâ€™t they describe? Why were they created? What are they good at? What are they bad at?

This talk is here to help demystify these formats, build a common vocabulary for the data they contain and help explain what each is good at, bad at, and how to use any of them as a tool to make your life better. A deeper understanding of these tools can turn working with many modern systems from a slog to a joy.

## Why do we care?

## The contenders

* **JSON**
* **YAML**
* **TOML**
* HCL

## Absolute Basics

## objects/maps

## strings

JSON

.code examples/strings.go /START JSON OMIT/,/END JSON OMIT/

YAML

.code examples/strings.go /START YAML OMIT/,/END YAML OMIT/

TOML

.code examples/strings.go /START TOML OMIT/,/END TOML OMIT/

HCL

.code examples/strings.go /START HCL OMIT/,/END HCL OMIT/

.play examples/strings.go /START RUN OMIT/,/END RUN OMIT/

## multiline strings

JSON

.code examples/multiline-strings.go /START JSON OMIT/,/END JSON OMIT/

YAML

.code examples/multiline-strings.go /START YAML OMIT/,/END YAML OMIT/

> See also: https://yaml-multiline.info/

TOML

.code examples/multiline-strings.go /START TOML OMIT/,/END TOML OMIT/

HCL

.code examples/multiline-strings.go /START HCL OMIT/,/END HCL OMIT/

> Not exactly the same, leaves a trailing newline
> Needs a *Terraform* `trim` function which is not pure HCL

.play examples/multiline-strings.go /START RUN OMIT/,/END RUN OMIT/

## chars


## bools
## ints, floats
## slices/lists
## null
## comments
## dates/times

# General Comparisons

## Speed
## Size
## Standardization
## Adoption
## Packages

## YAML Unique Features

## Anchors
## Document separator
## Frontmatter?
## Nested yaml strings


## JSON Unique Features
## Compactness
## Can be single-line

## TOML Unique Features
## Deep modifications without nesting
## ?

## HCL Unique Features
